/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  AuditContract,
  AuditContractInterface,
} from "../../contracts/AuditContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "actionType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ActionLogged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "actionType",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061017b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d72a266514610030575b600080fd5b61004361003e366004610090565b610045565b005b82336001600160a01b03167f187f5522814567109fefae7af87203ffbfc4fa05c555e27aa8e49e4b5a53b8d08484426040516100839392919061010c565b60405180910390a3505050565b6000806000604084860312156100a557600080fd5b83359250602084013567ffffffffffffffff808211156100c457600080fd5b818601915086601f8301126100d857600080fd5b8135818111156100e757600080fd5b8760208285010111156100f957600080fd5b6020830194508093505050509250925092565b604081528260408201528284606083013760006060848301015260006060601f19601f860116830101905082602083015294935050505056fea264697066735822122079f558f797d5b96470265a919d344b38782bfde477575f128c32ddee7b93eaab64736f6c63430008180033";

type AuditContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuditContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuditContract__factory extends ContractFactory {
  constructor(...args: AuditContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AuditContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuditContract__factory {
    return super.connect(runner) as AuditContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuditContractInterface {
    return new Interface(_abi) as AuditContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AuditContract {
    return new Contract(address, _abi, runner) as unknown as AuditContract;
  }
}
