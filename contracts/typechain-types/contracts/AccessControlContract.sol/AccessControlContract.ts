/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccessControlContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "isApproved"
      | "owner"
      | "renounceOwnership"
      | "requestAccess"
      | "requestOf"
      | "setVerifier"
      | "transferOwnership"
      | "zkVerifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessApproved"
      | "AccessRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAccess",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zkVerifier",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zkVerifier", data: BytesLike): Result;
}

export namespace AccessApprovedEvent {
  export type InputTuple = [requestId: BytesLike, subject: AddressLike];
  export type OutputTuple = [requestId: string, subject: string];
  export interface OutputObject {
    requestId: string;
    subject: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requester: AddressLike,
    subject: AddressLike,
    purposeHash: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    requester: string,
    subject: string,
    purposeHash: string
  ];
  export interface OutputObject {
    requestId: string;
    requester: string;
    subject: string;
    purposeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessControlContract extends BaseContract {
  connect(runner?: ContractRunner | null): AccessControlContract;
  waitForDeployment(): Promise<this>;

  interface: AccessControlContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [requestId: BytesLike, signature: BytesLike, optionalProof: BytesLike],
    [void],
    "nonpayable"
  >;

  isApproved: TypedContractMethod<[requestId: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestAccess: TypedContractMethod<
    [subject: AddressLike, purposeHash: BytesLike],
    [string],
    "nonpayable"
  >;

  requestOf: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, boolean] & {
        requester: string;
        subject: string;
        purposeHash: string;
        timestamp: bigint;
        approved: boolean;
      }
    ],
    "view"
  >;

  setVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  zkVerifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [requestId: BytesLike, signature: BytesLike, optionalProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApproved"
  ): TypedContractMethod<[requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestAccess"
  ): TypedContractMethod<
    [subject: AddressLike, purposeHash: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestOf"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, boolean] & {
        requester: string;
        subject: string;
        purposeHash: string;
        timestamp: bigint;
        approved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zkVerifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccessApproved"
  ): TypedContractEvent<
    AccessApprovedEvent.InputTuple,
    AccessApprovedEvent.OutputTuple,
    AccessApprovedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRequested"
  ): TypedContractEvent<
    AccessRequestedEvent.InputTuple,
    AccessRequestedEvent.OutputTuple,
    AccessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AccessApproved(bytes32,address)": TypedContractEvent<
      AccessApprovedEvent.InputTuple,
      AccessApprovedEvent.OutputTuple,
      AccessApprovedEvent.OutputObject
    >;
    AccessApproved: TypedContractEvent<
      AccessApprovedEvent.InputTuple,
      AccessApprovedEvent.OutputTuple,
      AccessApprovedEvent.OutputObject
    >;

    "AccessRequested(bytes32,address,address,bytes32)": TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;
    AccessRequested: TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
