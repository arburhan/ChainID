/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AuditContractInterface extends Interface {
  getFunction(nameOrSignature: "log"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ActionLogged"): EventFragment;

  encodeFunctionData(
    functionFragment: "log",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "log", data: BytesLike): Result;
}

export namespace ActionLoggedEvent {
  export type InputTuple = [
    actor: AddressLike,
    actionType: BytesLike,
    data: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    actor: string,
    actionType: string,
    data: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    actor: string;
    actionType: string;
    data: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuditContract extends BaseContract {
  connect(runner?: ContractRunner | null): AuditContract;
  waitForDeployment(): Promise<this>;

  interface: AuditContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  log: TypedContractMethod<
    [actionType: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "log"
  ): TypedContractMethod<
    [actionType: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActionLogged"
  ): TypedContractEvent<
    ActionLoggedEvent.InputTuple,
    ActionLoggedEvent.OutputTuple,
    ActionLoggedEvent.OutputObject
  >;

  filters: {
    "ActionLogged(address,bytes32,bytes,uint256)": TypedContractEvent<
      ActionLoggedEvent.InputTuple,
      ActionLoggedEvent.OutputTuple,
      ActionLoggedEvent.OutputObject
    >;
    ActionLogged: TypedContractEvent<
      ActionLoggedEvent.InputTuple,
      ActionLoggedEvent.OutputTuple,
      ActionLoggedEvent.OutputObject
    >;
  };
}
